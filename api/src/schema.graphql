scalar Date

type Query {
  getPlaces: [Place]
  getPlace(id: ID!): Place
  getUsers(role: Role): [User]
  getUser(id: ID!): User
  getCompanies: [Company]
  getCompany(id: ID!): Company
  checkAuth: User
  getTagTypes(category: Category!): [TagType]
  getTags: [Tag]
  getTag(id: ID!): Tag
  getStripeInvoicesByCompany(id: ID!): [StripeInvoice]
}

type Mutation {
  updateUser(
    userId: ID!
    firstName: String
    lastName: String
    email: String
    role: Role
    phone: String
  ): User

  createCompany(
    companyName: String
    companyType: CompanyType
    streetCompany: String
    zipCodeCompany: String
    cityCompany: String
    firstNameUser: String
    lastNameUser: String
    emailUser: String
    phoneUser: String
    roleUser: Role
    isRepresentative: Boolean
    emailDomains: [String!]!
  ): Company

  updateCompany(
    companyId: ID!
    name: String
    type: String
    street: String
    zipCode: String
    city: String
    emailDomains: [String]
  ): Company

  updateRepresentative(
    userEmail: String!
    companyId: ID!
    isRepresentative: Boolean!
  ): User

  updatePassword(email: String!, newPassword: String!): User

  updateHour(id: ID!, day: Day!, start: String!, end: String!): Place

  createUser(
    firstName: String
    lastName: String
    email: String!
    role: Role!
    companyId: ID
  ): AuthPayload

  createPlace(
    name: String!
    street: String
    zipCode: String
    city: String
    type: String
    category: Category
    tags: [ID!]
  ): Place

  login(email: String!, password: String!): AuthPayload
  logout: LogoutResponse

  deletePlace(id: ID!): Place
  deleteCompany(id: ID!): Company
  deleteUser(id: ID!): User

  createTagType(name: String!, category: Category!, parentTagType: ID): TagType!
  deleteTagType(id: ID!): TagType!
  updateTagType(id: ID!, name: String!): TagType!

  createTag(type: ID!, value: String!): Tag!
  deleteTag(id: ID!): Tag!
  updateTag(id: ID!): Tag!

  updatePlace(
    placeId: ID!
    name: String
    street: String
    zipCode: String
    city: String
    type: String
    category: Category
    tags: [ID!]
  ): Place

  createStripeInvoice(stripeCustomerId: String!): StripeInvoice
}

type User {
  id: ID!
  firstName: String
  lastName: String
  email: String
  phone: String
  password: String
  role: Role
  company: Company
  isRepresentative: Boolean
}

type Company {
  id: ID!
  name: String
  type: CompanyType
  address: Address
  users: [User]
  emailDomains: [String!]!
  stripeCustomerId: String
  userCount: Int
  stripeInvoices: [StripeInvoice]
}

type Place {
  id: ID!
  name: String
  address: Address
  hours: [Hour!]
  keywords: [String!]
  category: Category
  type: String
  tags: [Tag!]
}

type AuthPayload {
  token: String
  user: User
}

type LogoutResponse {
  response: String
}

type Address {
  street: String
  zipCode: String
  city: String
}

type Hour {
  day: Day
  start: String
  end: String
}

type TagType {
  id: ID!
  name: String!
  category: Category!
  parentTagType: TagType
  tags: [Tag!]
}

type Tag {
  id: ID!
  type: TagType!
  value: String!
  places: [Place!]
}

type StripeInvoice {
  id: String!
  created: String
  customer: String
  customer_email: String
  customer_name: String
  hosted_invoice_url: String
  status: String
  subscription: String
  total: String
}

enum CompanyType {
  COMPANY
  SCHOOL
  PLACE
  COWORKING
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum Category {
  FOOD
  SHOP
  ACTIVITY
}

enum Vegan {
  VG
  VGN
  VGF
}

enum Bio {
  NO
  PARTIAL
  FULL
}

enum Role {
  SUPER_ADMIN
  ADMIN
  MODERATOR
  USER
}
